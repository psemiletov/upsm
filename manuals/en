#upsm
https://github.com/psemiletov/upsm

   MANUAL

  upsm is public domain, Qt-based ups monitor (front-end for upsc from Network UPS Tools). It sits at the tray and polls nut server using upsc, so you need to set up NUT first (ups.conf and other stuff). From the Settings of upsm you can define the command line for upsc (i.e. "upsc myups" for example) and polling time period, in millisecond.
   Use "minimize" button to minimize upsm to the tray. "Close" button just closes the program, if the option "Hide from taskbar" is turned off. 
   And now how to set up NUT server.

1. Execute "lsusb" command to see the vendor id of your UPS, for example:

Bus 003 Device 004: ID 0d9f:0004 Powercom Co., Ltd
vendor id here is = 0d9f
and the bus is = 003

2. Copy, if not exists, file "some_number-nut-usbups.rules" from /lib/udev/rules.d to /etc/udev/rules.d.

3. Edit file /etc/ups/ups.conf, and put there to the end something like this:

[myups]
    driver = usbhid-ups
    port = auto
    desc = "My ups"
    vendorid = 0d9f
    pollfreq = 30

   So to the vendorid must be the vendorid that we know from lsusb. 
   pollfreq - the device polling frequency, in milliseconds.
   The bus is better to leave undefined, because the bus number can be changed after reboot,

  4. Copy systemd service files (nut-driver.service, nut-monitor.service, nut-server.service) from nut source (/scripts/systemd), if not installed with the package, to /etc/systemd/system. To ensure that nut-server will run after the possible failure, add to nut-server.service file at the [Unit] section lines

Restart=on-failure
RestartSec=360s 

   5.

Create (if not exists)
/etc/udev/rules.d/50-ups.rules
with following content:

SUBSYSTEM=="usb", ATTR{idVendor}=="0d9f", ATTR{idProduct}=="0004", SYMLINK+="ups0", GROUP="nut"

Where attributes for idVendor and idProduct lsusb are taken from lsubs output. This creates a persistent /dev/ups0 simlink (devices are initialized in random order, so we need a "static" name.

  6. Open nut-server.service file (at /etc/systemd/<....>), at [Unit section] edit:

[Unit]
After=local-fs.target network-online.target nut-driver.service ups0.device

   Thus, we ensure that nut-server.service will be started after ups0 is initialized on USB bus.


  7. Run

   systemctl enable nut-server 

   ...to enable autostart nut-driver and nut-driver after the next boot.

  6. Run

   systemctl start nut-server 

   ...to start it now.

 /* Under the hood, for non-systemd systems:

First you need to run the driver:
upsdrvctl start
Then run the server:
upsd
*/  

7. Read the data from UPS:

upsc myups

or, in the case of the nut built from the source:

/usr/local/ups/bin/upsc myups@localhost

8. Put this command to the "Command" parameter at upsm "Settings" panel.





///////////////////


Peter Semiletov <peter.semiletov@gmail.com>
